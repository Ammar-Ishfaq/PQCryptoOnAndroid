plugins {
    id 'com.android.library'
}

android {
    namespace "com.example.android"
    compileSdkVersion 31
    buildToolsVersion "33.0.2"
    ndkVersion "25.2.9519653"

    //TODO: parameterize versions using definitions in the root project's gradle file and inherit here
    // See: https://github.com/android/testing-samples/blob/main/runner/AndroidJunitRunnerSample/app/build.gradle#L47
    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 31

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        ndk {
             abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }
    }

    buildTypes {
        release {
            jniDebuggable true
            zipAlignEnabled true
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lint {
        ignoreWarnings false
    }

    externalNativeBuild {
        ndkBuild {
            // Tells Gradle to put outputs from external native
            // builds in the path specified below.
            buildStagingDirectory "./outputs/ndk-build"
            path 'jni/Android.mk'
        }
    }

    // Needed after adding junit-jupiter: https://stackoverflow.com/questions/44342455/more-than-one-file-was-found-with-os-independent-path-meta-inf-license
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/LICENSE-notice.md'
    }


    splits {
        abi {
            // Enables building multiple APKs per ABI using: ./gradlew assembleRelease -Pabi-splits
            enable project.hasProperty('abi-splits')

            // By default all ABIs are included, so use reset() and specify a chosen list.
            // Resets the list of ABIs that Gradle should create APKs for to none.
            reset()

            // Specifies a list of ABIs that Gradle should create APKs for.
            if (project.hasProperty('abi-splits')) {
                def abiSplits = project.getProperty('abi-splits')
                println("project.getProperty('abi-splits') -> " + project.getProperty('abi-splits'))
                if (abiSplits instanceof Boolean || abiSplits == 'true' || abiSplits == '') {
                    universalApk true
                    abiSplits = "armeabi-v7a,arm64-v8a,x86,x86_64"
                    println "Building universal APK"
                } else {
                    universalApk false
                    abiSplits = project.getProperty('abi-splits')
                }
                println "Building ABI splits for: " + abiSplits
                include abiSplits.split(',')
            }
        }
    }

}

tasks.withType(JavaCompile) {
    options.deprecation = true
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.6.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    androidTestImplementation 'org.junit.jupiter:junit-jupiter-params:5.6.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}
